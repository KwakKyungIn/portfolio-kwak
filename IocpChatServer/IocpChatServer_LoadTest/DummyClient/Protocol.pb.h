// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Struct.pb.h"
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_ADMIN_COMMAND_REQ;
struct C_ADMIN_COMMAND_REQDefaultTypeInternal;
extern C_ADMIN_COMMAND_REQDefaultTypeInternal _C_ADMIN_COMMAND_REQ_default_instance_;
class C_CREATE_ROOM_REQ;
struct C_CREATE_ROOM_REQDefaultTypeInternal;
extern C_CREATE_ROOM_REQDefaultTypeInternal _C_CREATE_ROOM_REQ_default_instance_;
class C_JOIN_ROOM_REQ;
struct C_JOIN_ROOM_REQDefaultTypeInternal;
extern C_JOIN_ROOM_REQDefaultTypeInternal _C_JOIN_ROOM_REQ_default_instance_;
class C_LEAVE_ROOM_REQ;
struct C_LEAVE_ROOM_REQDefaultTypeInternal;
extern C_LEAVE_ROOM_REQDefaultTypeInternal _C_LEAVE_ROOM_REQ_default_instance_;
class C_LOGIN_REQ;
struct C_LOGIN_REQDefaultTypeInternal;
extern C_LOGIN_REQDefaultTypeInternal _C_LOGIN_REQ_default_instance_;
class C_ROOM_CHAT_REQ;
struct C_ROOM_CHAT_REQDefaultTypeInternal;
extern C_ROOM_CHAT_REQDefaultTypeInternal _C_ROOM_CHAT_REQ_default_instance_;
class S_ADMIN_COMMAND_RES;
struct S_ADMIN_COMMAND_RESDefaultTypeInternal;
extern S_ADMIN_COMMAND_RESDefaultTypeInternal _S_ADMIN_COMMAND_RES_default_instance_;
class S_CREATE_ROOM_RES;
struct S_CREATE_ROOM_RESDefaultTypeInternal;
extern S_CREATE_ROOM_RESDefaultTypeInternal _S_CREATE_ROOM_RES_default_instance_;
class S_JOIN_ROOM_NTF;
struct S_JOIN_ROOM_NTFDefaultTypeInternal;
extern S_JOIN_ROOM_NTFDefaultTypeInternal _S_JOIN_ROOM_NTF_default_instance_;
class S_JOIN_ROOM_RES;
struct S_JOIN_ROOM_RESDefaultTypeInternal;
extern S_JOIN_ROOM_RESDefaultTypeInternal _S_JOIN_ROOM_RES_default_instance_;
class S_LEAVE_ROOM_ACK;
struct S_LEAVE_ROOM_ACKDefaultTypeInternal;
extern S_LEAVE_ROOM_ACKDefaultTypeInternal _S_LEAVE_ROOM_ACK_default_instance_;
class S_LOGIN_RES;
struct S_LOGIN_RESDefaultTypeInternal;
extern S_LOGIN_RESDefaultTypeInternal _S_LOGIN_RES_default_instance_;
class S_PRESENCE_NTF;
struct S_PRESENCE_NTFDefaultTypeInternal;
extern S_PRESENCE_NTFDefaultTypeInternal _S_PRESENCE_NTF_default_instance_;
class S_RATE_LIMIT_NTF;
struct S_RATE_LIMIT_NTFDefaultTypeInternal;
extern S_RATE_LIMIT_NTFDefaultTypeInternal _S_RATE_LIMIT_NTF_default_instance_;
class S_ROOM_CHAT_NTF;
struct S_ROOM_CHAT_NTFDefaultTypeInternal;
extern S_ROOM_CHAT_NTFDefaultTypeInternal _S_ROOM_CHAT_NTF_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_ADMIN_COMMAND_REQ* Arena::CreateMaybeMessage<::Protocol::C_ADMIN_COMMAND_REQ>(Arena*);
template<> ::Protocol::C_CREATE_ROOM_REQ* Arena::CreateMaybeMessage<::Protocol::C_CREATE_ROOM_REQ>(Arena*);
template<> ::Protocol::C_JOIN_ROOM_REQ* Arena::CreateMaybeMessage<::Protocol::C_JOIN_ROOM_REQ>(Arena*);
template<> ::Protocol::C_LEAVE_ROOM_REQ* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_ROOM_REQ>(Arena*);
template<> ::Protocol::C_LOGIN_REQ* Arena::CreateMaybeMessage<::Protocol::C_LOGIN_REQ>(Arena*);
template<> ::Protocol::C_ROOM_CHAT_REQ* Arena::CreateMaybeMessage<::Protocol::C_ROOM_CHAT_REQ>(Arena*);
template<> ::Protocol::S_ADMIN_COMMAND_RES* Arena::CreateMaybeMessage<::Protocol::S_ADMIN_COMMAND_RES>(Arena*);
template<> ::Protocol::S_CREATE_ROOM_RES* Arena::CreateMaybeMessage<::Protocol::S_CREATE_ROOM_RES>(Arena*);
template<> ::Protocol::S_JOIN_ROOM_NTF* Arena::CreateMaybeMessage<::Protocol::S_JOIN_ROOM_NTF>(Arena*);
template<> ::Protocol::S_JOIN_ROOM_RES* Arena::CreateMaybeMessage<::Protocol::S_JOIN_ROOM_RES>(Arena*);
template<> ::Protocol::S_LEAVE_ROOM_ACK* Arena::CreateMaybeMessage<::Protocol::S_LEAVE_ROOM_ACK>(Arena*);
template<> ::Protocol::S_LOGIN_RES* Arena::CreateMaybeMessage<::Protocol::S_LOGIN_RES>(Arena*);
template<> ::Protocol::S_PRESENCE_NTF* Arena::CreateMaybeMessage<::Protocol::S_PRESENCE_NTF>(Arena*);
template<> ::Protocol::S_RATE_LIMIT_NTF* Arena::CreateMaybeMessage<::Protocol::S_RATE_LIMIT_NTF>(Arena*);
template<> ::Protocol::S_ROOM_CHAT_NTF* Arena::CreateMaybeMessage<::Protocol::S_ROOM_CHAT_NTF>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN_REQ) */ {
 public:
  inline C_LOGIN_REQ() : C_LOGIN_REQ(nullptr) {}
  ~C_LOGIN_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN_REQ(const C_LOGIN_REQ& from);
  C_LOGIN_REQ(C_LOGIN_REQ&& from) noexcept
    : C_LOGIN_REQ() {
    *this = ::std::move(from);
  }

  inline C_LOGIN_REQ& operator=(const C_LOGIN_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN_REQ& operator=(C_LOGIN_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN_REQ* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN_REQ*>(
               &_C_LOGIN_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN_REQ& a, C_LOGIN_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOGIN_REQ& from) {
    C_LOGIN_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN_REQ";
  }
  protected:
  explicit C_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN_RES) */ {
 public:
  inline S_LOGIN_RES() : S_LOGIN_RES(nullptr) {}
  ~S_LOGIN_RES() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN_RES(const S_LOGIN_RES& from);
  S_LOGIN_RES(S_LOGIN_RES&& from) noexcept
    : S_LOGIN_RES() {
    *this = ::std::move(from);
  }

  inline S_LOGIN_RES& operator=(const S_LOGIN_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN_RES& operator=(S_LOGIN_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN_RES* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN_RES*>(
               &_S_LOGIN_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN_RES& a, S_LOGIN_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN_RES& from) {
    S_LOGIN_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN_RES";
  }
  protected:
  explicit S_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // .Protocol.ConnectStatus status = 2;
  void clear_status();
  ::Protocol::ConnectStatus status() const;
  void set_status(::Protocol::ConnectStatus value);
  private:
  ::Protocol::ConnectStatus _internal_status() const;
  void _internal_set_status(::Protocol::ConnectStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int64_t playerid_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_ROOM_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_ROOM_REQ) */ {
 public:
  inline C_CREATE_ROOM_REQ() : C_CREATE_ROOM_REQ(nullptr) {}
  ~C_CREATE_ROOM_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ROOM_REQ(const C_CREATE_ROOM_REQ& from);
  C_CREATE_ROOM_REQ(C_CREATE_ROOM_REQ&& from) noexcept
    : C_CREATE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ROOM_REQ& operator=(const C_CREATE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ROOM_REQ& operator=(C_CREATE_ROOM_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ROOM_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ROOM_REQ*>(
               &_C_CREATE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_CREATE_ROOM_REQ& a, C_CREATE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ROOM_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ROOM_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_ROOM_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_ROOM_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_ROOM_REQ& from) {
    C_CREATE_ROOM_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ROOM_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_ROOM_REQ";
  }
  protected:
  explicit C_CREATE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string roomName = 1;
  void clear_roomname();
  const std::string& roomname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_roomname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_roomname();
  PROTOBUF_NODISCARD std::string* release_roomname();
  void set_allocated_roomname(std::string* roomname);
  private:
  const std::string& _internal_roomname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_roomname(const std::string& value);
  std::string* _internal_mutable_roomname();
  public:

  // .Protocol.RoomType type = 2;
  void clear_type();
  ::Protocol::RoomType type() const;
  void set_type(::Protocol::RoomType value);
  private:
  ::Protocol::RoomType _internal_type() const;
  void _internal_set_type(::Protocol::RoomType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_ROOM_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr roomname_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CREATE_ROOM_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CREATE_ROOM_RES) */ {
 public:
  inline S_CREATE_ROOM_RES() : S_CREATE_ROOM_RES(nullptr) {}
  ~S_CREATE_ROOM_RES() override;
  explicit PROTOBUF_CONSTEXPR S_CREATE_ROOM_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CREATE_ROOM_RES(const S_CREATE_ROOM_RES& from);
  S_CREATE_ROOM_RES(S_CREATE_ROOM_RES&& from) noexcept
    : S_CREATE_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline S_CREATE_ROOM_RES& operator=(const S_CREATE_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CREATE_ROOM_RES& operator=(S_CREATE_ROOM_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CREATE_ROOM_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CREATE_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const S_CREATE_ROOM_RES*>(
               &_S_CREATE_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_CREATE_ROOM_RES& a, S_CREATE_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CREATE_ROOM_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CREATE_ROOM_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CREATE_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CREATE_ROOM_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CREATE_ROOM_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CREATE_ROOM_RES& from) {
    S_CREATE_ROOM_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CREATE_ROOM_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CREATE_ROOM_RES";
  }
  protected:
  explicit S_CREATE_ROOM_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kRoomFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .Protocol.RoomInfo room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::RoomInfo& room() const;
  PROTOBUF_NODISCARD ::Protocol::RoomInfo* release_room();
  ::Protocol::RoomInfo* mutable_room();
  void set_allocated_room(::Protocol::RoomInfo* room);
  private:
  const ::Protocol::RoomInfo& _internal_room() const;
  ::Protocol::RoomInfo* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::RoomInfo* room);
  ::Protocol::RoomInfo* unsafe_arena_release_room();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CREATE_ROOM_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::Protocol::RoomInfo* room_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_JOIN_ROOM_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_JOIN_ROOM_REQ) */ {
 public:
  inline C_JOIN_ROOM_REQ() : C_JOIN_ROOM_REQ(nullptr) {}
  ~C_JOIN_ROOM_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_JOIN_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_JOIN_ROOM_REQ(const C_JOIN_ROOM_REQ& from);
  C_JOIN_ROOM_REQ(C_JOIN_ROOM_REQ&& from) noexcept
    : C_JOIN_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline C_JOIN_ROOM_REQ& operator=(const C_JOIN_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_JOIN_ROOM_REQ& operator=(C_JOIN_ROOM_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_JOIN_ROOM_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_JOIN_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const C_JOIN_ROOM_REQ*>(
               &_C_JOIN_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_JOIN_ROOM_REQ& a, C_JOIN_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_JOIN_ROOM_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_JOIN_ROOM_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_JOIN_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_JOIN_ROOM_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_JOIN_ROOM_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_JOIN_ROOM_REQ& from) {
    C_JOIN_ROOM_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_JOIN_ROOM_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_JOIN_ROOM_REQ";
  }
  protected:
  explicit C_JOIN_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_JOIN_ROOM_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_JOIN_ROOM_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JOIN_ROOM_RES) */ {
 public:
  inline S_JOIN_ROOM_RES() : S_JOIN_ROOM_RES(nullptr) {}
  ~S_JOIN_ROOM_RES() override;
  explicit PROTOBUF_CONSTEXPR S_JOIN_ROOM_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JOIN_ROOM_RES(const S_JOIN_ROOM_RES& from);
  S_JOIN_ROOM_RES(S_JOIN_ROOM_RES&& from) noexcept
    : S_JOIN_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline S_JOIN_ROOM_RES& operator=(const S_JOIN_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JOIN_ROOM_RES& operator=(S_JOIN_ROOM_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JOIN_ROOM_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JOIN_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const S_JOIN_ROOM_RES*>(
               &_S_JOIN_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_JOIN_ROOM_RES& a, S_JOIN_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JOIN_ROOM_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JOIN_ROOM_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JOIN_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JOIN_ROOM_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_JOIN_ROOM_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_JOIN_ROOM_RES& from) {
    S_JOIN_ROOM_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JOIN_ROOM_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_JOIN_ROOM_RES";
  }
  protected:
  explicit S_JOIN_ROOM_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kRoomFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .Protocol.RoomInfo room = 2;
  bool has_room() const;
  private:
  bool _internal_has_room() const;
  public:
  void clear_room();
  const ::Protocol::RoomInfo& room() const;
  PROTOBUF_NODISCARD ::Protocol::RoomInfo* release_room();
  ::Protocol::RoomInfo* mutable_room();
  void set_allocated_room(::Protocol::RoomInfo* room);
  private:
  const ::Protocol::RoomInfo& _internal_room() const;
  ::Protocol::RoomInfo* _internal_mutable_room();
  public:
  void unsafe_arena_set_allocated_room(
      ::Protocol::RoomInfo* room);
  ::Protocol::RoomInfo* unsafe_arena_release_room();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_JOIN_ROOM_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::Protocol::RoomInfo* room_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_JOIN_ROOM_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_JOIN_ROOM_NTF) */ {
 public:
  inline S_JOIN_ROOM_NTF() : S_JOIN_ROOM_NTF(nullptr) {}
  ~S_JOIN_ROOM_NTF() override;
  explicit PROTOBUF_CONSTEXPR S_JOIN_ROOM_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_JOIN_ROOM_NTF(const S_JOIN_ROOM_NTF& from);
  S_JOIN_ROOM_NTF(S_JOIN_ROOM_NTF&& from) noexcept
    : S_JOIN_ROOM_NTF() {
    *this = ::std::move(from);
  }

  inline S_JOIN_ROOM_NTF& operator=(const S_JOIN_ROOM_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_JOIN_ROOM_NTF& operator=(S_JOIN_ROOM_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_JOIN_ROOM_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_JOIN_ROOM_NTF* internal_default_instance() {
    return reinterpret_cast<const S_JOIN_ROOM_NTF*>(
               &_S_JOIN_ROOM_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_JOIN_ROOM_NTF& a, S_JOIN_ROOM_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(S_JOIN_ROOM_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_JOIN_ROOM_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_JOIN_ROOM_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_JOIN_ROOM_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_JOIN_ROOM_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_JOIN_ROOM_NTF& from) {
    S_JOIN_ROOM_NTF::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_JOIN_ROOM_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_JOIN_ROOM_NTF";
  }
  protected:
  explicit S_JOIN_ROOM_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_JOIN_ROOM_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_CHAT_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ROOM_CHAT_REQ) */ {
 public:
  inline C_ROOM_CHAT_REQ() : C_ROOM_CHAT_REQ(nullptr) {}
  ~C_ROOM_CHAT_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_CHAT_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_CHAT_REQ(const C_ROOM_CHAT_REQ& from);
  C_ROOM_CHAT_REQ(C_ROOM_CHAT_REQ&& from) noexcept
    : C_ROOM_CHAT_REQ() {
    *this = ::std::move(from);
  }

  inline C_ROOM_CHAT_REQ& operator=(const C_ROOM_CHAT_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_CHAT_REQ& operator=(C_ROOM_CHAT_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_CHAT_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_CHAT_REQ* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_CHAT_REQ*>(
               &_C_ROOM_CHAT_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C_ROOM_CHAT_REQ& a, C_ROOM_CHAT_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_CHAT_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_CHAT_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_CHAT_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_CHAT_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_CHAT_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_CHAT_REQ& from) {
    C_ROOM_CHAT_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_CHAT_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ROOM_CHAT_REQ";
  }
  protected:
  explicit C_ROOM_CHAT_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kRoomIdFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ROOM_CHAT_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_CHAT_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ROOM_CHAT_NTF) */ {
 public:
  inline S_ROOM_CHAT_NTF() : S_ROOM_CHAT_NTF(nullptr) {}
  ~S_ROOM_CHAT_NTF() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_CHAT_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_CHAT_NTF(const S_ROOM_CHAT_NTF& from);
  S_ROOM_CHAT_NTF(S_ROOM_CHAT_NTF&& from) noexcept
    : S_ROOM_CHAT_NTF() {
    *this = ::std::move(from);
  }

  inline S_ROOM_CHAT_NTF& operator=(const S_ROOM_CHAT_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_CHAT_NTF& operator=(S_ROOM_CHAT_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_CHAT_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_CHAT_NTF* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_CHAT_NTF*>(
               &_S_ROOM_CHAT_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(S_ROOM_CHAT_NTF& a, S_ROOM_CHAT_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_CHAT_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_CHAT_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_CHAT_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_CHAT_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_CHAT_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_CHAT_NTF& from) {
    S_ROOM_CHAT_NTF::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_CHAT_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ROOM_CHAT_NTF";
  }
  protected:
  explicit S_ROOM_CHAT_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatFieldNumber = 2,
    kRoomIdFieldNumber = 1,
  };
  // .Protocol.ChatMessage chat = 2;
  bool has_chat() const;
  private:
  bool _internal_has_chat() const;
  public:
  void clear_chat();
  const ::Protocol::ChatMessage& chat() const;
  PROTOBUF_NODISCARD ::Protocol::ChatMessage* release_chat();
  ::Protocol::ChatMessage* mutable_chat();
  void set_allocated_chat(::Protocol::ChatMessage* chat);
  private:
  const ::Protocol::ChatMessage& _internal_chat() const;
  ::Protocol::ChatMessage* _internal_mutable_chat();
  public:
  void unsafe_arena_set_allocated_chat(
      ::Protocol::ChatMessage* chat);
  ::Protocol::ChatMessage* unsafe_arena_release_chat();

  // int64 roomId = 1;
  void clear_roomid();
  int64_t roomid() const;
  void set_roomid(int64_t value);
  private:
  int64_t _internal_roomid() const;
  void _internal_set_roomid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ROOM_CHAT_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::ChatMessage* chat_;
    int64_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_ROOM_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_ROOM_REQ) */ {
 public:
  inline C_LEAVE_ROOM_REQ() : C_LEAVE_ROOM_REQ(nullptr) {}
  ~C_LEAVE_ROOM_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_LEAVE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_ROOM_REQ(const C_LEAVE_ROOM_REQ& from);
  C_LEAVE_ROOM_REQ(C_LEAVE_ROOM_REQ&& from) noexcept
    : C_LEAVE_ROOM_REQ() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_ROOM_REQ& operator=(const C_LEAVE_ROOM_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_ROOM_REQ& operator=(C_LEAVE_ROOM_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_ROOM_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_ROOM_REQ* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_ROOM_REQ*>(
               &_C_LEAVE_ROOM_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_LEAVE_ROOM_REQ& a, C_LEAVE_ROOM_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_ROOM_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_ROOM_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE_ROOM_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE_ROOM_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LEAVE_ROOM_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LEAVE_ROOM_REQ& from) {
    C_LEAVE_ROOM_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LEAVE_ROOM_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_ROOM_REQ";
  }
  protected:
  explicit C_LEAVE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
  };
  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_ROOM_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t roomid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE_ROOM_ACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE_ROOM_ACK) */ {
 public:
  inline S_LEAVE_ROOM_ACK() : S_LEAVE_ROOM_ACK(nullptr) {}
  ~S_LEAVE_ROOM_ACK() override;
  explicit PROTOBUF_CONSTEXPR S_LEAVE_ROOM_ACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE_ROOM_ACK(const S_LEAVE_ROOM_ACK& from);
  S_LEAVE_ROOM_ACK(S_LEAVE_ROOM_ACK&& from) noexcept
    : S_LEAVE_ROOM_ACK() {
    *this = ::std::move(from);
  }

  inline S_LEAVE_ROOM_ACK& operator=(const S_LEAVE_ROOM_ACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE_ROOM_ACK& operator=(S_LEAVE_ROOM_ACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE_ROOM_ACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE_ROOM_ACK* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE_ROOM_ACK*>(
               &_S_LEAVE_ROOM_ACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_LEAVE_ROOM_ACK& a, S_LEAVE_ROOM_ACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE_ROOM_ACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE_ROOM_ACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE_ROOM_ACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE_ROOM_ACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LEAVE_ROOM_ACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LEAVE_ROOM_ACK& from) {
    S_LEAVE_ROOM_ACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEAVE_ROOM_ACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEAVE_ROOM_ACK";
  }
  protected:
  explicit S_LEAVE_ROOM_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int32 roomId = 1;
  void clear_roomid();
  int32_t roomid() const;
  void set_roomid(int32_t value);
  private:
  int32_t _internal_roomid() const;
  void _internal_set_roomid(int32_t value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE_ROOM_ACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t roomid_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PRESENCE_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PRESENCE_NTF) */ {
 public:
  inline S_PRESENCE_NTF() : S_PRESENCE_NTF(nullptr) {}
  ~S_PRESENCE_NTF() override;
  explicit PROTOBUF_CONSTEXPR S_PRESENCE_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PRESENCE_NTF(const S_PRESENCE_NTF& from);
  S_PRESENCE_NTF(S_PRESENCE_NTF&& from) noexcept
    : S_PRESENCE_NTF() {
    *this = ::std::move(from);
  }

  inline S_PRESENCE_NTF& operator=(const S_PRESENCE_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PRESENCE_NTF& operator=(S_PRESENCE_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PRESENCE_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PRESENCE_NTF* internal_default_instance() {
    return reinterpret_cast<const S_PRESENCE_NTF*>(
               &_S_PRESENCE_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_PRESENCE_NTF& a, S_PRESENCE_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PRESENCE_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PRESENCE_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PRESENCE_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PRESENCE_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PRESENCE_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PRESENCE_NTF& from) {
    S_PRESENCE_NTF::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PRESENCE_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PRESENCE_NTF";
  }
  protected:
  explicit S_PRESENCE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // .Protocol.PresenceStatus status = 2;
  void clear_status();
  ::Protocol::PresenceStatus status() const;
  void set_status(::Protocol::PresenceStatus value);
  private:
  ::Protocol::PresenceStatus _internal_status() const;
  void _internal_set_status(::Protocol::PresenceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PRESENCE_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t playerid_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_RATE_LIMIT_NTF final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_RATE_LIMIT_NTF) */ {
 public:
  inline S_RATE_LIMIT_NTF() : S_RATE_LIMIT_NTF(nullptr) {}
  ~S_RATE_LIMIT_NTF() override;
  explicit PROTOBUF_CONSTEXPR S_RATE_LIMIT_NTF(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_RATE_LIMIT_NTF(const S_RATE_LIMIT_NTF& from);
  S_RATE_LIMIT_NTF(S_RATE_LIMIT_NTF&& from) noexcept
    : S_RATE_LIMIT_NTF() {
    *this = ::std::move(from);
  }

  inline S_RATE_LIMIT_NTF& operator=(const S_RATE_LIMIT_NTF& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RATE_LIMIT_NTF& operator=(S_RATE_LIMIT_NTF&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_RATE_LIMIT_NTF& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_RATE_LIMIT_NTF* internal_default_instance() {
    return reinterpret_cast<const S_RATE_LIMIT_NTF*>(
               &_S_RATE_LIMIT_NTF_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_RATE_LIMIT_NTF& a, S_RATE_LIMIT_NTF& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RATE_LIMIT_NTF* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RATE_LIMIT_NTF* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_RATE_LIMIT_NTF* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_RATE_LIMIT_NTF>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_RATE_LIMIT_NTF& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_RATE_LIMIT_NTF& from) {
    S_RATE_LIMIT_NTF::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RATE_LIMIT_NTF* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_RATE_LIMIT_NTF";
  }
  protected:
  explicit S_RATE_LIMIT_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kCooldownSecFieldNumber = 2,
  };
  // string reason = 3;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // int64 playerId = 1;
  void clear_playerid();
  int64_t playerid() const;
  void set_playerid(int64_t value);
  private:
  int64_t _internal_playerid() const;
  void _internal_set_playerid(int64_t value);
  public:

  // int32 cooldownSec = 2;
  void clear_cooldownsec();
  int32_t cooldownsec() const;
  void set_cooldownsec(int32_t value);
  private:
  int32_t _internal_cooldownsec() const;
  void _internal_set_cooldownsec(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_RATE_LIMIT_NTF)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    int64_t playerid_;
    int32_t cooldownsec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ADMIN_COMMAND_REQ final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ADMIN_COMMAND_REQ) */ {
 public:
  inline C_ADMIN_COMMAND_REQ() : C_ADMIN_COMMAND_REQ(nullptr) {}
  ~C_ADMIN_COMMAND_REQ() override;
  explicit PROTOBUF_CONSTEXPR C_ADMIN_COMMAND_REQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ADMIN_COMMAND_REQ(const C_ADMIN_COMMAND_REQ& from);
  C_ADMIN_COMMAND_REQ(C_ADMIN_COMMAND_REQ&& from) noexcept
    : C_ADMIN_COMMAND_REQ() {
    *this = ::std::move(from);
  }

  inline C_ADMIN_COMMAND_REQ& operator=(const C_ADMIN_COMMAND_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ADMIN_COMMAND_REQ& operator=(C_ADMIN_COMMAND_REQ&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ADMIN_COMMAND_REQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ADMIN_COMMAND_REQ* internal_default_instance() {
    return reinterpret_cast<const C_ADMIN_COMMAND_REQ*>(
               &_C_ADMIN_COMMAND_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_ADMIN_COMMAND_REQ& a, C_ADMIN_COMMAND_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ADMIN_COMMAND_REQ* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ADMIN_COMMAND_REQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ADMIN_COMMAND_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ADMIN_COMMAND_REQ>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ADMIN_COMMAND_REQ& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ADMIN_COMMAND_REQ& from) {
    C_ADMIN_COMMAND_REQ::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ADMIN_COMMAND_REQ* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ADMIN_COMMAND_REQ";
  }
  protected:
  explicit C_ADMIN_COMMAND_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // string command = 1;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ADMIN_COMMAND_REQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ADMIN_COMMAND_RES final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ADMIN_COMMAND_RES) */ {
 public:
  inline S_ADMIN_COMMAND_RES() : S_ADMIN_COMMAND_RES(nullptr) {}
  ~S_ADMIN_COMMAND_RES() override;
  explicit PROTOBUF_CONSTEXPR S_ADMIN_COMMAND_RES(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ADMIN_COMMAND_RES(const S_ADMIN_COMMAND_RES& from);
  S_ADMIN_COMMAND_RES(S_ADMIN_COMMAND_RES&& from) noexcept
    : S_ADMIN_COMMAND_RES() {
    *this = ::std::move(from);
  }

  inline S_ADMIN_COMMAND_RES& operator=(const S_ADMIN_COMMAND_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ADMIN_COMMAND_RES& operator=(S_ADMIN_COMMAND_RES&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ADMIN_COMMAND_RES& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ADMIN_COMMAND_RES* internal_default_instance() {
    return reinterpret_cast<const S_ADMIN_COMMAND_RES*>(
               &_S_ADMIN_COMMAND_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_ADMIN_COMMAND_RES& a, S_ADMIN_COMMAND_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ADMIN_COMMAND_RES* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ADMIN_COMMAND_RES* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ADMIN_COMMAND_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ADMIN_COMMAND_RES>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ADMIN_COMMAND_RES& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ADMIN_COMMAND_RES& from) {
    S_ADMIN_COMMAND_RES::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ADMIN_COMMAND_RES* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ADMIN_COMMAND_RES";
  }
  protected:
  explicit S_ADMIN_COMMAND_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string output = 2;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // .Protocol.AdminActionResult result = 1;
  void clear_result();
  ::Protocol::AdminActionResult result() const;
  void set_result(::Protocol::AdminActionResult value);
  private:
  ::Protocol::AdminActionResult _internal_result() const;
  void _internal_set_result(::Protocol::AdminActionResult value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ADMIN_COMMAND_RES)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
    int result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN_REQ

// string name = 1;
inline void C_LOGIN_REQ::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& C_LOGIN_REQ::name() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN_REQ.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN_REQ::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN_REQ.name)
}
inline std::string* C_LOGIN_REQ::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN_REQ.name)
  return _s;
}
inline const std::string& C_LOGIN_REQ::_internal_name() const {
  return _impl_.name_.Get();
}
inline void C_LOGIN_REQ::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN_REQ::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN_REQ::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN_REQ.name)
  return _impl_.name_.Release();
}
inline void C_LOGIN_REQ::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN_REQ.name)
}

// -------------------------------------------------------------------

// S_LOGIN_RES

// int64 playerId = 1;
inline void S_LOGIN_RES::clear_playerid() {
  _impl_.playerid_ = int64_t{0};
}
inline int64_t S_LOGIN_RES::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int64_t S_LOGIN_RES::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN_RES.playerId)
  return _internal_playerid();
}
inline void S_LOGIN_RES::_internal_set_playerid(int64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_LOGIN_RES::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN_RES.playerId)
}

// .Protocol.ConnectStatus status = 2;
inline void S_LOGIN_RES::clear_status() {
  _impl_.status_ = 0;
}
inline ::Protocol::ConnectStatus S_LOGIN_RES::_internal_status() const {
  return static_cast< ::Protocol::ConnectStatus >(_impl_.status_);
}
inline ::Protocol::ConnectStatus S_LOGIN_RES::status() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN_RES.status)
  return _internal_status();
}
inline void S_LOGIN_RES::_internal_set_status(::Protocol::ConnectStatus value) {
  
  _impl_.status_ = value;
}
inline void S_LOGIN_RES::set_status(::Protocol::ConnectStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN_RES.status)
}

// string reason = 3;
inline void S_LOGIN_RES::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& S_LOGIN_RES::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN_RES.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOGIN_RES::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN_RES.reason)
}
inline std::string* S_LOGIN_RES::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN_RES.reason)
  return _s;
}
inline const std::string& S_LOGIN_RES::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void S_LOGIN_RES::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOGIN_RES::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOGIN_RES::release_reason() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN_RES.reason)
  return _impl_.reason_.Release();
}
inline void S_LOGIN_RES::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN_RES.reason)
}

// -------------------------------------------------------------------

// C_CREATE_ROOM_REQ

// string roomName = 1;
inline void C_CREATE_ROOM_REQ::clear_roomname() {
  _impl_.roomname_.ClearToEmpty();
}
inline const std::string& C_CREATE_ROOM_REQ::roomname() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM_REQ.roomName)
  return _internal_roomname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ROOM_REQ::set_roomname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.roomname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM_REQ.roomName)
}
inline std::string* C_CREATE_ROOM_REQ::mutable_roomname() {
  std::string* _s = _internal_mutable_roomname();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ROOM_REQ.roomName)
  return _s;
}
inline const std::string& C_CREATE_ROOM_REQ::_internal_roomname() const {
  return _impl_.roomname_.Get();
}
inline void C_CREATE_ROOM_REQ::_internal_set_roomname(const std::string& value) {
  
  _impl_.roomname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM_REQ::_internal_mutable_roomname() {
  
  return _impl_.roomname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM_REQ::release_roomname() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ROOM_REQ.roomName)
  return _impl_.roomname_.Release();
}
inline void C_CREATE_ROOM_REQ::set_allocated_roomname(std::string* roomname) {
  if (roomname != nullptr) {
    
  } else {
    
  }
  _impl_.roomname_.SetAllocated(roomname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.roomname_.IsDefault()) {
    _impl_.roomname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ROOM_REQ.roomName)
}

// .Protocol.RoomType type = 2;
inline void C_CREATE_ROOM_REQ::clear_type() {
  _impl_.type_ = 0;
}
inline ::Protocol::RoomType C_CREATE_ROOM_REQ::_internal_type() const {
  return static_cast< ::Protocol::RoomType >(_impl_.type_);
}
inline ::Protocol::RoomType C_CREATE_ROOM_REQ::type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM_REQ.type)
  return _internal_type();
}
inline void C_CREATE_ROOM_REQ::_internal_set_type(::Protocol::RoomType value) {
  
  _impl_.type_ = value;
}
inline void C_CREATE_ROOM_REQ::set_type(::Protocol::RoomType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM_REQ.type)
}

// -------------------------------------------------------------------

// S_CREATE_ROOM_RES

// bool success = 1;
inline void S_CREATE_ROOM_RES::clear_success() {
  _impl_.success_ = false;
}
inline bool S_CREATE_ROOM_RES::_internal_success() const {
  return _impl_.success_;
}
inline bool S_CREATE_ROOM_RES::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM_RES.success)
  return _internal_success();
}
inline void S_CREATE_ROOM_RES::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_CREATE_ROOM_RES::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM_RES.success)
}

// .Protocol.RoomInfo room = 2;
inline bool S_CREATE_ROOM_RES::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool S_CREATE_ROOM_RES::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::RoomInfo& S_CREATE_ROOM_RES::_internal_room() const {
  const ::Protocol::RoomInfo* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_CREATE_ROOM_RES::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM_RES.room)
  return _internal_room();
}
inline void S_CREATE_ROOM_RES::unsafe_arena_set_allocated_room(
    ::Protocol::RoomInfo* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_CREATE_ROOM_RES.room)
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM_RES::release_room() {
  
  ::Protocol::RoomInfo* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM_RES::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_ROOM_RES.room)
  
  ::Protocol::RoomInfo* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM_RES::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::Protocol::RoomInfo* S_CREATE_ROOM_RES::mutable_room() {
  ::Protocol::RoomInfo* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_ROOM_RES.room)
  return _msg;
}
inline void S_CREATE_ROOM_RES::set_allocated_room(::Protocol::RoomInfo* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_ROOM_RES.room)
}

// string reason = 3;
inline void S_CREATE_ROOM_RES::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& S_CREATE_ROOM_RES::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CREATE_ROOM_RES.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CREATE_ROOM_RES::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CREATE_ROOM_RES.reason)
}
inline std::string* S_CREATE_ROOM_RES::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CREATE_ROOM_RES.reason)
  return _s;
}
inline const std::string& S_CREATE_ROOM_RES::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void S_CREATE_ROOM_RES::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CREATE_ROOM_RES::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CREATE_ROOM_RES::release_reason() {
  // @@protoc_insertion_point(field_release:Protocol.S_CREATE_ROOM_RES.reason)
  return _impl_.reason_.Release();
}
inline void S_CREATE_ROOM_RES::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CREATE_ROOM_RES.reason)
}

// -------------------------------------------------------------------

// C_JOIN_ROOM_REQ

// int64 roomId = 1;
inline void C_JOIN_ROOM_REQ::clear_roomid() {
  _impl_.roomid_ = int64_t{0};
}
inline int64_t C_JOIN_ROOM_REQ::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int64_t C_JOIN_ROOM_REQ::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_JOIN_ROOM_REQ.roomId)
  return _internal_roomid();
}
inline void C_JOIN_ROOM_REQ::_internal_set_roomid(int64_t value) {
  
  _impl_.roomid_ = value;
}
inline void C_JOIN_ROOM_REQ::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_JOIN_ROOM_REQ.roomId)
}

// -------------------------------------------------------------------

// S_JOIN_ROOM_RES

// bool success = 1;
inline void S_JOIN_ROOM_RES::clear_success() {
  _impl_.success_ = false;
}
inline bool S_JOIN_ROOM_RES::_internal_success() const {
  return _impl_.success_;
}
inline bool S_JOIN_ROOM_RES::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM_RES.success)
  return _internal_success();
}
inline void S_JOIN_ROOM_RES::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_JOIN_ROOM_RES::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM_RES.success)
}

// .Protocol.RoomInfo room = 2;
inline bool S_JOIN_ROOM_RES::_internal_has_room() const {
  return this != internal_default_instance() && _impl_.room_ != nullptr;
}
inline bool S_JOIN_ROOM_RES::has_room() const {
  return _internal_has_room();
}
inline const ::Protocol::RoomInfo& S_JOIN_ROOM_RES::_internal_room() const {
  const ::Protocol::RoomInfo* p = _impl_.room_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::RoomInfo&>(
      ::Protocol::_RoomInfo_default_instance_);
}
inline const ::Protocol::RoomInfo& S_JOIN_ROOM_RES::room() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM_RES.room)
  return _internal_room();
}
inline void S_JOIN_ROOM_RES::unsafe_arena_set_allocated_room(
    ::Protocol::RoomInfo* room) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  _impl_.room_ = room;
  if (room) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_JOIN_ROOM_RES.room)
}
inline ::Protocol::RoomInfo* S_JOIN_ROOM_RES::release_room() {
  
  ::Protocol::RoomInfo* temp = _impl_.room_;
  _impl_.room_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::RoomInfo* S_JOIN_ROOM_RES::unsafe_arena_release_room() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_ROOM_RES.room)
  
  ::Protocol::RoomInfo* temp = _impl_.room_;
  _impl_.room_ = nullptr;
  return temp;
}
inline ::Protocol::RoomInfo* S_JOIN_ROOM_RES::_internal_mutable_room() {
  
  if (_impl_.room_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::RoomInfo>(GetArenaForAllocation());
    _impl_.room_ = p;
  }
  return _impl_.room_;
}
inline ::Protocol::RoomInfo* S_JOIN_ROOM_RES::mutable_room() {
  ::Protocol::RoomInfo* _msg = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_ROOM_RES.room)
  return _msg;
}
inline void S_JOIN_ROOM_RES::set_allocated_room(::Protocol::RoomInfo* room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.room_);
  }
  if (room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room));
    if (message_arena != submessage_arena) {
      room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.room_ = room;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_ROOM_RES.room)
}

// string reason = 3;
inline void S_JOIN_ROOM_RES::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& S_JOIN_ROOM_RES::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM_RES.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_JOIN_ROOM_RES::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM_RES.reason)
}
inline std::string* S_JOIN_ROOM_RES::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_ROOM_RES.reason)
  return _s;
}
inline const std::string& S_JOIN_ROOM_RES::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void S_JOIN_ROOM_RES::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM_RES::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM_RES::release_reason() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_ROOM_RES.reason)
  return _impl_.reason_.Release();
}
inline void S_JOIN_ROOM_RES::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_ROOM_RES.reason)
}

// -------------------------------------------------------------------

// S_JOIN_ROOM_NTF

// int64 playerId = 1;
inline void S_JOIN_ROOM_NTF::clear_playerid() {
  _impl_.playerid_ = int64_t{0};
}
inline int64_t S_JOIN_ROOM_NTF::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int64_t S_JOIN_ROOM_NTF::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM_NTF.playerId)
  return _internal_playerid();
}
inline void S_JOIN_ROOM_NTF::_internal_set_playerid(int64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_JOIN_ROOM_NTF::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM_NTF.playerId)
}

// string name = 2;
inline void S_JOIN_ROOM_NTF::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& S_JOIN_ROOM_NTF::name() const {
  // @@protoc_insertion_point(field_get:Protocol.S_JOIN_ROOM_NTF.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_JOIN_ROOM_NTF::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_JOIN_ROOM_NTF.name)
}
inline std::string* S_JOIN_ROOM_NTF::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Protocol.S_JOIN_ROOM_NTF.name)
  return _s;
}
inline const std::string& S_JOIN_ROOM_NTF::_internal_name() const {
  return _impl_.name_.Get();
}
inline void S_JOIN_ROOM_NTF::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM_NTF::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* S_JOIN_ROOM_NTF::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.S_JOIN_ROOM_NTF.name)
  return _impl_.name_.Release();
}
inline void S_JOIN_ROOM_NTF::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_JOIN_ROOM_NTF.name)
}

// -------------------------------------------------------------------

// C_ROOM_CHAT_REQ

// int64 roomId = 1;
inline void C_ROOM_CHAT_REQ::clear_roomid() {
  _impl_.roomid_ = int64_t{0};
}
inline int64_t C_ROOM_CHAT_REQ::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int64_t C_ROOM_CHAT_REQ::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CHAT_REQ.roomId)
  return _internal_roomid();
}
inline void C_ROOM_CHAT_REQ::_internal_set_roomid(int64_t value) {
  
  _impl_.roomid_ = value;
}
inline void C_ROOM_CHAT_REQ::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CHAT_REQ.roomId)
}

// string message = 2;
inline void C_ROOM_CHAT_REQ::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& C_ROOM_CHAT_REQ::message() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ROOM_CHAT_REQ.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CHAT_REQ::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ROOM_CHAT_REQ.message)
}
inline std::string* C_ROOM_CHAT_REQ::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ROOM_CHAT_REQ.message)
  return _s;
}
inline const std::string& C_ROOM_CHAT_REQ::_internal_message() const {
  return _impl_.message_.Get();
}
inline void C_ROOM_CHAT_REQ::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT_REQ::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT_REQ::release_message() {
  // @@protoc_insertion_point(field_release:Protocol.C_ROOM_CHAT_REQ.message)
  return _impl_.message_.Release();
}
inline void C_ROOM_CHAT_REQ::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ROOM_CHAT_REQ.message)
}

// -------------------------------------------------------------------

// S_ROOM_CHAT_NTF

// int64 roomId = 1;
inline void S_ROOM_CHAT_NTF::clear_roomid() {
  _impl_.roomid_ = int64_t{0};
}
inline int64_t S_ROOM_CHAT_NTF::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int64_t S_ROOM_CHAT_NTF::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_CHAT_NTF.roomId)
  return _internal_roomid();
}
inline void S_ROOM_CHAT_NTF::_internal_set_roomid(int64_t value) {
  
  _impl_.roomid_ = value;
}
inline void S_ROOM_CHAT_NTF::set_roomid(int64_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ROOM_CHAT_NTF.roomId)
}

// .Protocol.ChatMessage chat = 2;
inline bool S_ROOM_CHAT_NTF::_internal_has_chat() const {
  return this != internal_default_instance() && _impl_.chat_ != nullptr;
}
inline bool S_ROOM_CHAT_NTF::has_chat() const {
  return _internal_has_chat();
}
inline const ::Protocol::ChatMessage& S_ROOM_CHAT_NTF::_internal_chat() const {
  const ::Protocol::ChatMessage* p = _impl_.chat_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::ChatMessage&>(
      ::Protocol::_ChatMessage_default_instance_);
}
inline const ::Protocol::ChatMessage& S_ROOM_CHAT_NTF::chat() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ROOM_CHAT_NTF.chat)
  return _internal_chat();
}
inline void S_ROOM_CHAT_NTF::unsafe_arena_set_allocated_chat(
    ::Protocol::ChatMessage* chat) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  _impl_.chat_ = chat;
  if (chat) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.S_ROOM_CHAT_NTF.chat)
}
inline ::Protocol::ChatMessage* S_ROOM_CHAT_NTF::release_chat() {
  
  ::Protocol::ChatMessage* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::ChatMessage* S_ROOM_CHAT_NTF::unsafe_arena_release_chat() {
  // @@protoc_insertion_point(field_release:Protocol.S_ROOM_CHAT_NTF.chat)
  
  ::Protocol::ChatMessage* temp = _impl_.chat_;
  _impl_.chat_ = nullptr;
  return temp;
}
inline ::Protocol::ChatMessage* S_ROOM_CHAT_NTF::_internal_mutable_chat() {
  
  if (_impl_.chat_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::ChatMessage>(GetArenaForAllocation());
    _impl_.chat_ = p;
  }
  return _impl_.chat_;
}
inline ::Protocol::ChatMessage* S_ROOM_CHAT_NTF::mutable_chat() {
  ::Protocol::ChatMessage* _msg = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ROOM_CHAT_NTF.chat)
  return _msg;
}
inline void S_ROOM_CHAT_NTF::set_allocated_chat(::Protocol::ChatMessage* chat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chat_);
  }
  if (chat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat));
    if (message_arena != submessage_arena) {
      chat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chat_ = chat;
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ROOM_CHAT_NTF.chat)
}

// -------------------------------------------------------------------

// C_LEAVE_ROOM_REQ

// int32 roomId = 1;
inline void C_LEAVE_ROOM_REQ::clear_roomid() {
  _impl_.roomid_ = 0;
}
inline int32_t C_LEAVE_ROOM_REQ::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int32_t C_LEAVE_ROOM_REQ::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LEAVE_ROOM_REQ.roomId)
  return _internal_roomid();
}
inline void C_LEAVE_ROOM_REQ::_internal_set_roomid(int32_t value) {
  
  _impl_.roomid_ = value;
}
inline void C_LEAVE_ROOM_REQ::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.C_LEAVE_ROOM_REQ.roomId)
}

// -------------------------------------------------------------------

// S_LEAVE_ROOM_ACK

// int32 roomId = 1;
inline void S_LEAVE_ROOM_ACK::clear_roomid() {
  _impl_.roomid_ = 0;
}
inline int32_t S_LEAVE_ROOM_ACK::_internal_roomid() const {
  return _impl_.roomid_;
}
inline int32_t S_LEAVE_ROOM_ACK::roomid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEAVE_ROOM_ACK.roomId)
  return _internal_roomid();
}
inline void S_LEAVE_ROOM_ACK::_internal_set_roomid(int32_t value) {
  
  _impl_.roomid_ = value;
}
inline void S_LEAVE_ROOM_ACK::set_roomid(int32_t value) {
  _internal_set_roomid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEAVE_ROOM_ACK.roomId)
}

// bool success = 2;
inline void S_LEAVE_ROOM_ACK::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LEAVE_ROOM_ACK::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LEAVE_ROOM_ACK::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEAVE_ROOM_ACK.success)
  return _internal_success();
}
inline void S_LEAVE_ROOM_ACK::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LEAVE_ROOM_ACK::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEAVE_ROOM_ACK.success)
}

// -------------------------------------------------------------------

// S_PRESENCE_NTF

// int64 playerId = 1;
inline void S_PRESENCE_NTF::clear_playerid() {
  _impl_.playerid_ = int64_t{0};
}
inline int64_t S_PRESENCE_NTF::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int64_t S_PRESENCE_NTF::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PRESENCE_NTF.playerId)
  return _internal_playerid();
}
inline void S_PRESENCE_NTF::_internal_set_playerid(int64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_PRESENCE_NTF::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PRESENCE_NTF.playerId)
}

// .Protocol.PresenceStatus status = 2;
inline void S_PRESENCE_NTF::clear_status() {
  _impl_.status_ = 0;
}
inline ::Protocol::PresenceStatus S_PRESENCE_NTF::_internal_status() const {
  return static_cast< ::Protocol::PresenceStatus >(_impl_.status_);
}
inline ::Protocol::PresenceStatus S_PRESENCE_NTF::status() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PRESENCE_NTF.status)
  return _internal_status();
}
inline void S_PRESENCE_NTF::_internal_set_status(::Protocol::PresenceStatus value) {
  
  _impl_.status_ = value;
}
inline void S_PRESENCE_NTF::set_status(::Protocol::PresenceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PRESENCE_NTF.status)
}

// -------------------------------------------------------------------

// S_RATE_LIMIT_NTF

// int64 playerId = 1;
inline void S_RATE_LIMIT_NTF::clear_playerid() {
  _impl_.playerid_ = int64_t{0};
}
inline int64_t S_RATE_LIMIT_NTF::_internal_playerid() const {
  return _impl_.playerid_;
}
inline int64_t S_RATE_LIMIT_NTF::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RATE_LIMIT_NTF.playerId)
  return _internal_playerid();
}
inline void S_RATE_LIMIT_NTF::_internal_set_playerid(int64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_RATE_LIMIT_NTF::set_playerid(int64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RATE_LIMIT_NTF.playerId)
}

// int32 cooldownSec = 2;
inline void S_RATE_LIMIT_NTF::clear_cooldownsec() {
  _impl_.cooldownsec_ = 0;
}
inline int32_t S_RATE_LIMIT_NTF::_internal_cooldownsec() const {
  return _impl_.cooldownsec_;
}
inline int32_t S_RATE_LIMIT_NTF::cooldownsec() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RATE_LIMIT_NTF.cooldownSec)
  return _internal_cooldownsec();
}
inline void S_RATE_LIMIT_NTF::_internal_set_cooldownsec(int32_t value) {
  
  _impl_.cooldownsec_ = value;
}
inline void S_RATE_LIMIT_NTF::set_cooldownsec(int32_t value) {
  _internal_set_cooldownsec(value);
  // @@protoc_insertion_point(field_set:Protocol.S_RATE_LIMIT_NTF.cooldownSec)
}

// string reason = 3;
inline void S_RATE_LIMIT_NTF::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& S_RATE_LIMIT_NTF::reason() const {
  // @@protoc_insertion_point(field_get:Protocol.S_RATE_LIMIT_NTF.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_RATE_LIMIT_NTF::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_RATE_LIMIT_NTF.reason)
}
inline std::string* S_RATE_LIMIT_NTF::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:Protocol.S_RATE_LIMIT_NTF.reason)
  return _s;
}
inline const std::string& S_RATE_LIMIT_NTF::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void S_RATE_LIMIT_NTF::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* S_RATE_LIMIT_NTF::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* S_RATE_LIMIT_NTF::release_reason() {
  // @@protoc_insertion_point(field_release:Protocol.S_RATE_LIMIT_NTF.reason)
  return _impl_.reason_.Release();
}
inline void S_RATE_LIMIT_NTF::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_RATE_LIMIT_NTF.reason)
}

// -------------------------------------------------------------------

// C_ADMIN_COMMAND_REQ

// string command = 1;
inline void C_ADMIN_COMMAND_REQ::clear_command() {
  _impl_.command_.ClearToEmpty();
}
inline const std::string& C_ADMIN_COMMAND_REQ::command() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ADMIN_COMMAND_REQ.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ADMIN_COMMAND_REQ::set_command(ArgT0&& arg0, ArgT... args) {
 
 _impl_.command_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ADMIN_COMMAND_REQ.command)
}
inline std::string* C_ADMIN_COMMAND_REQ::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ADMIN_COMMAND_REQ.command)
  return _s;
}
inline const std::string& C_ADMIN_COMMAND_REQ::_internal_command() const {
  return _impl_.command_.Get();
}
inline void C_ADMIN_COMMAND_REQ::_internal_set_command(const std::string& value) {
  
  _impl_.command_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ADMIN_COMMAND_REQ::_internal_mutable_command() {
  
  return _impl_.command_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ADMIN_COMMAND_REQ::release_command() {
  // @@protoc_insertion_point(field_release:Protocol.C_ADMIN_COMMAND_REQ.command)
  return _impl_.command_.Release();
}
inline void C_ADMIN_COMMAND_REQ::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  _impl_.command_.SetAllocated(command, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.command_.IsDefault()) {
    _impl_.command_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ADMIN_COMMAND_REQ.command)
}

// -------------------------------------------------------------------

// S_ADMIN_COMMAND_RES

// .Protocol.AdminActionResult result = 1;
inline void S_ADMIN_COMMAND_RES::clear_result() {
  _impl_.result_ = 0;
}
inline ::Protocol::AdminActionResult S_ADMIN_COMMAND_RES::_internal_result() const {
  return static_cast< ::Protocol::AdminActionResult >(_impl_.result_);
}
inline ::Protocol::AdminActionResult S_ADMIN_COMMAND_RES::result() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADMIN_COMMAND_RES.result)
  return _internal_result();
}
inline void S_ADMIN_COMMAND_RES::_internal_set_result(::Protocol::AdminActionResult value) {
  
  _impl_.result_ = value;
}
inline void S_ADMIN_COMMAND_RES::set_result(::Protocol::AdminActionResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ADMIN_COMMAND_RES.result)
}

// string output = 2;
inline void S_ADMIN_COMMAND_RES::clear_output() {
  _impl_.output_.ClearToEmpty();
}
inline const std::string& S_ADMIN_COMMAND_RES::output() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ADMIN_COMMAND_RES.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ADMIN_COMMAND_RES::set_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ADMIN_COMMAND_RES.output)
}
inline std::string* S_ADMIN_COMMAND_RES::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ADMIN_COMMAND_RES.output)
  return _s;
}
inline const std::string& S_ADMIN_COMMAND_RES::_internal_output() const {
  return _impl_.output_.Get();
}
inline void S_ADMIN_COMMAND_RES::_internal_set_output(const std::string& value) {
  
  _impl_.output_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ADMIN_COMMAND_RES::_internal_mutable_output() {
  
  return _impl_.output_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ADMIN_COMMAND_RES::release_output() {
  // @@protoc_insertion_point(field_release:Protocol.S_ADMIN_COMMAND_RES.output)
  return _impl_.output_.Release();
}
inline void S_ADMIN_COMMAND_RES::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  _impl_.output_.SetAllocated(output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_.IsDefault()) {
    _impl_.output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ADMIN_COMMAND_RES.output)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
