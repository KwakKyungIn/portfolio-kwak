// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN_REQ::C_LOGIN_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOGIN_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGIN_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGIN_REQDefaultTypeInternal() {}
  union {
    C_LOGIN_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGIN_REQDefaultTypeInternal _C_LOGIN_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN_RES::S_LOGIN_RES(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGIN_RESDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGIN_RESDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGIN_RESDefaultTypeInternal() {}
  union {
    S_LOGIN_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGIN_RESDefaultTypeInternal _S_LOGIN_RES_default_instance_;
PROTOBUF_CONSTEXPR C_CREATE_ROOM_REQ::C_CREATE_ROOM_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CREATE_ROOM_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CREATE_ROOM_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CREATE_ROOM_REQDefaultTypeInternal() {}
  union {
    C_CREATE_ROOM_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATE_ROOM_REQDefaultTypeInternal _C_CREATE_ROOM_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_CREATE_ROOM_RES::S_CREATE_ROOM_RES(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CREATE_ROOM_RESDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CREATE_ROOM_RESDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CREATE_ROOM_RESDefaultTypeInternal() {}
  union {
    S_CREATE_ROOM_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CREATE_ROOM_RESDefaultTypeInternal _S_CREATE_ROOM_RES_default_instance_;
PROTOBUF_CONSTEXPR C_JOIN_ROOM_REQ::C_JOIN_ROOM_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_JOIN_ROOM_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_JOIN_ROOM_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_JOIN_ROOM_REQDefaultTypeInternal() {}
  union {
    C_JOIN_ROOM_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_JOIN_ROOM_REQDefaultTypeInternal _C_JOIN_ROOM_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_JOIN_ROOM_RES::S_JOIN_ROOM_RES(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_)*/nullptr
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_JOIN_ROOM_RESDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_JOIN_ROOM_RESDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_JOIN_ROOM_RESDefaultTypeInternal() {}
  union {
    S_JOIN_ROOM_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_JOIN_ROOM_RESDefaultTypeInternal _S_JOIN_ROOM_RES_default_instance_;
PROTOBUF_CONSTEXPR S_JOIN_ROOM_NTF::S_JOIN_ROOM_NTF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_JOIN_ROOM_NTFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_JOIN_ROOM_NTFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_JOIN_ROOM_NTFDefaultTypeInternal() {}
  union {
    S_JOIN_ROOM_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_JOIN_ROOM_NTFDefaultTypeInternal _S_JOIN_ROOM_NTF_default_instance_;
PROTOBUF_CONSTEXPR C_ROOM_CHAT_REQ::C_ROOM_CHAT_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.roomid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ROOM_CHAT_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ROOM_CHAT_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ROOM_CHAT_REQDefaultTypeInternal() {}
  union {
    C_ROOM_CHAT_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ROOM_CHAT_REQDefaultTypeInternal _C_ROOM_CHAT_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_ROOM_CHAT_NTF::S_ROOM_CHAT_NTF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_)*/nullptr
  , /*decltype(_impl_.roomid_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ROOM_CHAT_NTFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ROOM_CHAT_NTFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ROOM_CHAT_NTFDefaultTypeInternal() {}
  union {
    S_ROOM_CHAT_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ROOM_CHAT_NTFDefaultTypeInternal _S_ROOM_CHAT_NTF_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE_ROOM_REQ::C_LEAVE_ROOM_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LEAVE_ROOM_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVE_ROOM_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVE_ROOM_REQDefaultTypeInternal() {}
  union {
    C_LEAVE_ROOM_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_ROOM_REQDefaultTypeInternal _C_LEAVE_ROOM_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE_ROOM_ACK::S_LEAVE_ROOM_ACK(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roomid_)*/0
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LEAVE_ROOM_ACKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVE_ROOM_ACKDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVE_ROOM_ACKDefaultTypeInternal() {}
  union {
    S_LEAVE_ROOM_ACK _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_ROOM_ACKDefaultTypeInternal _S_LEAVE_ROOM_ACK_default_instance_;
PROTOBUF_CONSTEXPR S_PRESENCE_NTF::S_PRESENCE_NTF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.playerid_)*/int64_t{0}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PRESENCE_NTFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PRESENCE_NTFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PRESENCE_NTFDefaultTypeInternal() {}
  union {
    S_PRESENCE_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PRESENCE_NTFDefaultTypeInternal _S_PRESENCE_NTF_default_instance_;
PROTOBUF_CONSTEXPR S_RATE_LIMIT_NTF::S_RATE_LIMIT_NTF(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/int64_t{0}
  , /*decltype(_impl_.cooldownsec_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_RATE_LIMIT_NTFDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_RATE_LIMIT_NTFDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_RATE_LIMIT_NTFDefaultTypeInternal() {}
  union {
    S_RATE_LIMIT_NTF _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_RATE_LIMIT_NTFDefaultTypeInternal _S_RATE_LIMIT_NTF_default_instance_;
PROTOBUF_CONSTEXPR C_ADMIN_COMMAND_REQ::C_ADMIN_COMMAND_REQ(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.command_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ADMIN_COMMAND_REQDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ADMIN_COMMAND_REQDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ADMIN_COMMAND_REQDefaultTypeInternal() {}
  union {
    C_ADMIN_COMMAND_REQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ADMIN_COMMAND_REQDefaultTypeInternal _C_ADMIN_COMMAND_REQ_default_instance_;
PROTOBUF_CONSTEXPR S_ADMIN_COMMAND_RES::S_ADMIN_COMMAND_RES(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ADMIN_COMMAND_RESDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ADMIN_COMMAND_RESDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ADMIN_COMMAND_RESDefaultTypeInternal() {}
  union {
    S_ADMIN_COMMAND_RES _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ADMIN_COMMAND_RESDefaultTypeInternal _S_ADMIN_COMMAND_RES_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN_REQ, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN_RES, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN_RES, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN_RES, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM_REQ, _impl_.roomname_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM_REQ, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM_RES, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM_RES, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CREATE_ROOM_RES, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_JOIN_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_JOIN_ROOM_REQ, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_RES, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_RES, _impl_.room_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_RES, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_NTF, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_JOIN_ROOM_NTF, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_CHAT_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_CHAT_REQ, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ROOM_CHAT_REQ, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_CHAT_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_CHAT_NTF, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ROOM_CHAT_NTF, _impl_.chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_ROOM_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_ROOM_REQ, _impl_.roomid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_ROOM_ACK, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_ROOM_ACK, _impl_.roomid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_ROOM_ACK, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRESENCE_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRESENCE_NTF, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRESENCE_NTF, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RATE_LIMIT_NTF, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RATE_LIMIT_NTF, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RATE_LIMIT_NTF, _impl_.cooldownsec_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_RATE_LIMIT_NTF, _impl_.reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ADMIN_COMMAND_REQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ADMIN_COMMAND_REQ, _impl_.command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADMIN_COMMAND_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADMIN_COMMAND_RES, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ADMIN_COMMAND_RES, _impl_.output_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN_REQ)},
  { 7, -1, -1, sizeof(::Protocol::S_LOGIN_RES)},
  { 16, -1, -1, sizeof(::Protocol::C_CREATE_ROOM_REQ)},
  { 24, -1, -1, sizeof(::Protocol::S_CREATE_ROOM_RES)},
  { 33, -1, -1, sizeof(::Protocol::C_JOIN_ROOM_REQ)},
  { 40, -1, -1, sizeof(::Protocol::S_JOIN_ROOM_RES)},
  { 49, -1, -1, sizeof(::Protocol::S_JOIN_ROOM_NTF)},
  { 57, -1, -1, sizeof(::Protocol::C_ROOM_CHAT_REQ)},
  { 65, -1, -1, sizeof(::Protocol::S_ROOM_CHAT_NTF)},
  { 73, -1, -1, sizeof(::Protocol::C_LEAVE_ROOM_REQ)},
  { 80, -1, -1, sizeof(::Protocol::S_LEAVE_ROOM_ACK)},
  { 88, -1, -1, sizeof(::Protocol::S_PRESENCE_NTF)},
  { 96, -1, -1, sizeof(::Protocol::S_RATE_LIMIT_NTF)},
  { 105, -1, -1, sizeof(::Protocol::C_ADMIN_COMMAND_REQ)},
  { 112, -1, -1, sizeof(::Protocol::S_ADMIN_COMMAND_RES)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_REQ_default_instance_._instance,
  &::Protocol::_S_LOGIN_RES_default_instance_._instance,
  &::Protocol::_C_CREATE_ROOM_REQ_default_instance_._instance,
  &::Protocol::_S_CREATE_ROOM_RES_default_instance_._instance,
  &::Protocol::_C_JOIN_ROOM_REQ_default_instance_._instance,
  &::Protocol::_S_JOIN_ROOM_RES_default_instance_._instance,
  &::Protocol::_S_JOIN_ROOM_NTF_default_instance_._instance,
  &::Protocol::_C_ROOM_CHAT_REQ_default_instance_._instance,
  &::Protocol::_S_ROOM_CHAT_NTF_default_instance_._instance,
  &::Protocol::_C_LEAVE_ROOM_REQ_default_instance_._instance,
  &::Protocol::_S_LEAVE_ROOM_ACK_default_instance_._instance,
  &::Protocol::_S_PRESENCE_NTF_default_instance_._instance,
  &::Protocol::_S_RATE_LIMIT_NTF_default_instance_._instance,
  &::Protocol::_C_ADMIN_COMMAND_REQ_default_instance_._instance,
  &::Protocol::_S_ADMIN_COMMAND_RES_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\014Struct.proto"
  "\032\nEnum.proto\"\033\n\013C_LOGIN_REQ\022\014\n\004name\030\001 \001("
  "\t\"X\n\013S_LOGIN_RES\022\020\n\010playerId\030\001 \001(\003\022\'\n\006st"
  "atus\030\002 \001(\0162\027.Protocol.ConnectStatus\022\016\n\006r"
  "eason\030\003 \001(\t\"G\n\021C_CREATE_ROOM_REQ\022\020\n\010room"
  "Name\030\001 \001(\t\022 \n\004type\030\002 \001(\0162\022.Protocol.Room"
  "Type\"V\n\021S_CREATE_ROOM_RES\022\017\n\007success\030\001 \001"
  "(\010\022 \n\004room\030\002 \001(\0132\022.Protocol.RoomInfo\022\016\n\006"
  "reason\030\003 \001(\t\"!\n\017C_JOIN_ROOM_REQ\022\016\n\006roomI"
  "d\030\001 \001(\003\"T\n\017S_JOIN_ROOM_RES\022\017\n\007success\030\001 "
  "\001(\010\022 \n\004room\030\002 \001(\0132\022.Protocol.RoomInfo\022\016\n"
  "\006reason\030\003 \001(\t\"1\n\017S_JOIN_ROOM_NTF\022\020\n\010play"
  "erId\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\"2\n\017C_ROOM_CHAT_"
  "REQ\022\016\n\006roomId\030\001 \001(\003\022\017\n\007message\030\002 \001(\t\"F\n\017"
  "S_ROOM_CHAT_NTF\022\016\n\006roomId\030\001 \001(\003\022#\n\004chat\030"
  "\002 \001(\0132\025.Protocol.ChatMessage\"\"\n\020C_LEAVE_"
  "ROOM_REQ\022\016\n\006roomId\030\001 \001(\005\"3\n\020S_LEAVE_ROOM"
  "_ACK\022\016\n\006roomId\030\001 \001(\005\022\017\n\007success\030\002 \001(\010\"L\n"
  "\016S_PRESENCE_NTF\022\020\n\010playerId\030\001 \001(\003\022(\n\006sta"
  "tus\030\002 \001(\0162\030.Protocol.PresenceStatus\"I\n\020S"
  "_RATE_LIMIT_NTF\022\020\n\010playerId\030\001 \001(\003\022\023\n\013coo"
  "ldownSec\030\002 \001(\005\022\016\n\006reason\030\003 \001(\t\"&\n\023C_ADMI"
  "N_COMMAND_REQ\022\017\n\007command\030\001 \001(\t\"R\n\023S_ADMI"
  "N_COMMAND_RES\022+\n\006result\030\001 \001(\0162\033.Protocol"
  ".AdminActionResult\022\016\n\006output\030\002 \001(\tb\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1002, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 15,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN_REQ::_Internal {
 public:
};

C_LOGIN_REQ::C_LOGIN_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN_REQ)
}
C_LOGIN_REQ::C_LOGIN_REQ(const C_LOGIN_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOGIN_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN_REQ)
}

inline void C_LOGIN_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN_REQ::~C_LOGIN_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void C_LOGIN_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOGIN_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN_REQ.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN_REQ.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN_REQ)
  return target;
}

size_t C_LOGIN_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOGIN_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN_REQ::GetClassData() const { return &_class_data_; }


void C_LOGIN_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOGIN_REQ*>(&to_msg);
  auto& from = static_cast<const C_LOGIN_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN_REQ::CopyFrom(const C_LOGIN_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN_REQ::IsInitialized() const {
  return true;
}

void C_LOGIN_REQ::InternalSwap(C_LOGIN_REQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN_RES::_Internal {
 public:
};

S_LOGIN_RES::S_LOGIN_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN_RES)
}
S_LOGIN_RES::S_LOGIN_RES(const S_LOGIN_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN_RES* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN_RES)
}

inline void S_LOGIN_RES::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.playerid_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_LOGIN_RES::~S_LOGIN_RES() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN_RES)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void S_LOGIN_RES::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN_RES::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ConnectStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Protocol::ConnectStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_LOGIN_RES.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.ConnectStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_LOGIN_RES.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN_RES)
  return target;
}

size_t S_LOGIN_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // .Protocol.ConnectStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN_RES::GetClassData() const { return &_class_data_; }


void S_LOGIN_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN_RES*>(&to_msg);
  auto& from = static_cast<const S_LOGIN_RES&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN_RES::CopyFrom(const S_LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN_RES::IsInitialized() const {
  return true;
}

void S_LOGIN_RES::InternalSwap(S_LOGIN_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN_RES, _impl_.status_)
      + sizeof(S_LOGIN_RES::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN_RES, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN_RES::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_CREATE_ROOM_REQ::_Internal {
 public:
};

C_CREATE_ROOM_REQ::C_CREATE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_ROOM_REQ)
}
C_CREATE_ROOM_REQ::C_CREATE_ROOM_REQ(const C_CREATE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CREATE_ROOM_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomname_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_roomname().empty()) {
    _this->_impl_.roomname_.Set(from._internal_roomname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_ROOM_REQ)
}

inline void C_CREATE_ROOM_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomname_){}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.roomname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.roomname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CREATE_ROOM_REQ::~C_CREATE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATE_ROOM_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CREATE_ROOM_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roomname_.Destroy();
}

void C_CREATE_ROOM_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CREATE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomname_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_ROOM_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string roomName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_roomname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATE_ROOM_REQ.roomName"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.RoomType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Protocol::RoomType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CREATE_ROOM_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_roomname().data(), static_cast<int>(this->_internal_roomname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_ROOM_REQ.roomName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_roomname(), target);
  }

  // .Protocol.RoomType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_ROOM_REQ)
  return target;
}

size_t C_CREATE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_ROOM_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string roomName = 1;
  if (!this->_internal_roomname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_roomname());
  }

  // .Protocol.RoomType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATE_ROOM_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CREATE_ROOM_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATE_ROOM_REQ::GetClassData() const { return &_class_data_; }


void C_CREATE_ROOM_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CREATE_ROOM_REQ*>(&to_msg);
  auto& from = static_cast<const C_CREATE_ROOM_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_roomname().empty()) {
    _this->_internal_set_roomname(from._internal_roomname());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CREATE_ROOM_REQ::CopyFrom(const C_CREATE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_ROOM_REQ::IsInitialized() const {
  return true;
}

void C_CREATE_ROOM_REQ::InternalSwap(C_CREATE_ROOM_REQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.roomname_, lhs_arena,
      &other->_impl_.roomname_, rhs_arena
  );
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_ROOM_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_CREATE_ROOM_RES::_Internal {
 public:
  static const ::Protocol::RoomInfo& room(const S_CREATE_ROOM_RES* msg);
};

const ::Protocol::RoomInfo&
S_CREATE_ROOM_RES::_Internal::room(const S_CREATE_ROOM_RES* msg) {
  return *msg->_impl_.room_;
}
void S_CREATE_ROOM_RES::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
S_CREATE_ROOM_RES::S_CREATE_ROOM_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CREATE_ROOM_RES)
}
S_CREATE_ROOM_RES::S_CREATE_ROOM_RES(const S_CREATE_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CREATE_ROOM_RES* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::Protocol::RoomInfo(*from._impl_.room_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CREATE_ROOM_RES)
}

inline void S_CREATE_ROOM_RES::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CREATE_ROOM_RES::~S_CREATE_ROOM_RES() {
  // @@protoc_insertion_point(destructor:Protocol.S_CREATE_ROOM_RES)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CREATE_ROOM_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_;
}

void S_CREATE_ROOM_RES::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CREATE_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CREATE_ROOM_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CREATE_ROOM_RES::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.RoomInfo room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CREATE_ROOM_RES.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CREATE_ROOM_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CREATE_ROOM_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.RoomInfo room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CREATE_ROOM_RES.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CREATE_ROOM_RES)
  return target;
}

size_t S_CREATE_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CREATE_ROOM_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .Protocol.RoomInfo room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CREATE_ROOM_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CREATE_ROOM_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CREATE_ROOM_RES::GetClassData() const { return &_class_data_; }


void S_CREATE_ROOM_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CREATE_ROOM_RES*>(&to_msg);
  auto& from = static_cast<const S_CREATE_ROOM_RES&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CREATE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::Protocol::RoomInfo::MergeFrom(
        from._internal_room());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CREATE_ROOM_RES::CopyFrom(const S_CREATE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CREATE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CREATE_ROOM_RES::IsInitialized() const {
  return true;
}

void S_CREATE_ROOM_RES::InternalSwap(S_CREATE_ROOM_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM_RES, _impl_.success_)
      + sizeof(S_CREATE_ROOM_RES::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_CREATE_ROOM_RES, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CREATE_ROOM_RES::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_JOIN_ROOM_REQ::_Internal {
 public:
};

C_JOIN_ROOM_REQ::C_JOIN_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_JOIN_ROOM_REQ)
}
C_JOIN_ROOM_REQ::C_JOIN_ROOM_REQ(const C_JOIN_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_JOIN_ROOM_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_JOIN_ROOM_REQ)
}

inline void C_JOIN_ROOM_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_JOIN_ROOM_REQ::~C_JOIN_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_JOIN_ROOM_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_JOIN_ROOM_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_JOIN_ROOM_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_JOIN_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_JOIN_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_JOIN_ROOM_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_JOIN_ROOM_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_JOIN_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_JOIN_ROOM_REQ)
  return target;
}

size_t C_JOIN_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_JOIN_ROOM_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_JOIN_ROOM_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_JOIN_ROOM_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_JOIN_ROOM_REQ::GetClassData() const { return &_class_data_; }


void C_JOIN_ROOM_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_JOIN_ROOM_REQ*>(&to_msg);
  auto& from = static_cast<const C_JOIN_ROOM_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_JOIN_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_JOIN_ROOM_REQ::CopyFrom(const C_JOIN_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_JOIN_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_JOIN_ROOM_REQ::IsInitialized() const {
  return true;
}

void C_JOIN_ROOM_REQ::InternalSwap(C_JOIN_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_JOIN_ROOM_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class S_JOIN_ROOM_RES::_Internal {
 public:
  static const ::Protocol::RoomInfo& room(const S_JOIN_ROOM_RES* msg);
};

const ::Protocol::RoomInfo&
S_JOIN_ROOM_RES::_Internal::room(const S_JOIN_ROOM_RES* msg) {
  return *msg->_impl_.room_;
}
void S_JOIN_ROOM_RES::clear_room() {
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
}
S_JOIN_ROOM_RES::S_JOIN_ROOM_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_JOIN_ROOM_RES)
}
S_JOIN_ROOM_RES::S_JOIN_ROOM_RES(const S_JOIN_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_JOIN_ROOM_RES* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_room()) {
    _this->_impl_.room_ = new ::Protocol::RoomInfo(*from._impl_.room_);
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_JOIN_ROOM_RES)
}

inline void S_JOIN_ROOM_RES::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.room_){nullptr}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_JOIN_ROOM_RES::~S_JOIN_ROOM_RES() {
  // @@protoc_insertion_point(destructor:Protocol.S_JOIN_ROOM_RES)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_JOIN_ROOM_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  if (this != internal_default_instance()) delete _impl_.room_;
}

void S_JOIN_ROOM_RES::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_JOIN_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_JOIN_ROOM_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.room_ != nullptr) {
    delete _impl_.room_;
  }
  _impl_.room_ = nullptr;
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_JOIN_ROOM_RES::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.RoomInfo room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_JOIN_ROOM_RES.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_JOIN_ROOM_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_JOIN_ROOM_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // .Protocol.RoomInfo room = 2;
  if (this->_internal_has_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room(this),
        _Internal::room(this).GetCachedSize(), target, stream);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_JOIN_ROOM_RES.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_JOIN_ROOM_RES)
  return target;
}

size_t S_JOIN_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_JOIN_ROOM_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // .Protocol.RoomInfo room = 2;
  if (this->_internal_has_room()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.room_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_JOIN_ROOM_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_JOIN_ROOM_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_JOIN_ROOM_RES::GetClassData() const { return &_class_data_; }


void S_JOIN_ROOM_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_JOIN_ROOM_RES*>(&to_msg);
  auto& from = static_cast<const S_JOIN_ROOM_RES&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_JOIN_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_has_room()) {
    _this->_internal_mutable_room()->::Protocol::RoomInfo::MergeFrom(
        from._internal_room());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_JOIN_ROOM_RES::CopyFrom(const S_JOIN_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_JOIN_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_JOIN_ROOM_RES::IsInitialized() const {
  return true;
}

void S_JOIN_ROOM_RES::InternalSwap(S_JOIN_ROOM_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_JOIN_ROOM_RES, _impl_.success_)
      + sizeof(S_JOIN_ROOM_RES::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_JOIN_ROOM_RES, _impl_.room_)>(
          reinterpret_cast<char*>(&_impl_.room_),
          reinterpret_cast<char*>(&other->_impl_.room_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_JOIN_ROOM_RES::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_JOIN_ROOM_NTF::_Internal {
 public:
};

S_JOIN_ROOM_NTF::S_JOIN_ROOM_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_JOIN_ROOM_NTF)
}
S_JOIN_ROOM_NTF::S_JOIN_ROOM_NTF(const S_JOIN_ROOM_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_JOIN_ROOM_NTF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_JOIN_ROOM_NTF)
}

inline void S_JOIN_ROOM_NTF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.playerid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_JOIN_ROOM_NTF::~S_JOIN_ROOM_NTF() {
  // @@protoc_insertion_point(destructor:Protocol.S_JOIN_ROOM_NTF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_JOIN_ROOM_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void S_JOIN_ROOM_NTF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_JOIN_ROOM_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_JOIN_ROOM_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.playerid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_JOIN_ROOM_NTF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_JOIN_ROOM_NTF.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_JOIN_ROOM_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_JOIN_ROOM_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_JOIN_ROOM_NTF.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_JOIN_ROOM_NTF)
  return target;
}

size_t S_JOIN_ROOM_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_JOIN_ROOM_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_JOIN_ROOM_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_JOIN_ROOM_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_JOIN_ROOM_NTF::GetClassData() const { return &_class_data_; }


void S_JOIN_ROOM_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_JOIN_ROOM_NTF*>(&to_msg);
  auto& from = static_cast<const S_JOIN_ROOM_NTF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_JOIN_ROOM_NTF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_JOIN_ROOM_NTF::CopyFrom(const S_JOIN_ROOM_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_JOIN_ROOM_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_JOIN_ROOM_NTF::IsInitialized() const {
  return true;
}

void S_JOIN_ROOM_NTF::InternalSwap(S_JOIN_ROOM_NTF* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_JOIN_ROOM_NTF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class C_ROOM_CHAT_REQ::_Internal {
 public:
};

C_ROOM_CHAT_REQ::C_ROOM_CHAT_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ROOM_CHAT_REQ)
}
C_ROOM_CHAT_REQ::C_ROOM_CHAT_REQ(const C_ROOM_CHAT_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ROOM_CHAT_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ROOM_CHAT_REQ)
}

inline void C_ROOM_CHAT_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.roomid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ROOM_CHAT_REQ::~C_ROOM_CHAT_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_ROOM_CHAT_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ROOM_CHAT_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void C_ROOM_CHAT_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ROOM_CHAT_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ROOM_CHAT_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.roomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ROOM_CHAT_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ROOM_CHAT_REQ.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ROOM_CHAT_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ROOM_CHAT_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ROOM_CHAT_REQ.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ROOM_CHAT_REQ)
  return target;
}

size_t C_ROOM_CHAT_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ROOM_CHAT_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ROOM_CHAT_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ROOM_CHAT_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ROOM_CHAT_REQ::GetClassData() const { return &_class_data_; }


void C_ROOM_CHAT_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ROOM_CHAT_REQ*>(&to_msg);
  auto& from = static_cast<const C_ROOM_CHAT_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ROOM_CHAT_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ROOM_CHAT_REQ::CopyFrom(const C_ROOM_CHAT_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ROOM_CHAT_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ROOM_CHAT_REQ::IsInitialized() const {
  return true;
}

void C_ROOM_CHAT_REQ::InternalSwap(C_ROOM_CHAT_REQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ROOM_CHAT_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class S_ROOM_CHAT_NTF::_Internal {
 public:
  static const ::Protocol::ChatMessage& chat(const S_ROOM_CHAT_NTF* msg);
};

const ::Protocol::ChatMessage&
S_ROOM_CHAT_NTF::_Internal::chat(const S_ROOM_CHAT_NTF* msg) {
  return *msg->_impl_.chat_;
}
void S_ROOM_CHAT_NTF::clear_chat() {
  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
}
S_ROOM_CHAT_NTF::S_ROOM_CHAT_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ROOM_CHAT_NTF)
}
S_ROOM_CHAT_NTF::S_ROOM_CHAT_NTF(const S_ROOM_CHAT_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ROOM_CHAT_NTF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chat()) {
    _this->_impl_.chat_ = new ::Protocol::ChatMessage(*from._impl_.chat_);
  }
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ROOM_CHAT_NTF)
}

inline void S_ROOM_CHAT_NTF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_){nullptr}
    , decltype(_impl_.roomid_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ROOM_CHAT_NTF::~S_ROOM_CHAT_NTF() {
  // @@protoc_insertion_point(destructor:Protocol.S_ROOM_CHAT_NTF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ROOM_CHAT_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chat_;
}

void S_ROOM_CHAT_NTF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ROOM_CHAT_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ROOM_CHAT_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chat_ != nullptr) {
    delete _impl_.chat_;
  }
  _impl_.chat_ = nullptr;
  _impl_.roomid_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ROOM_CHAT_NTF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.ChatMessage chat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ROOM_CHAT_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ROOM_CHAT_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_roomid(), target);
  }

  // .Protocol.ChatMessage chat = 2;
  if (this->_internal_has_chat()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chat(this),
        _Internal::chat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ROOM_CHAT_NTF)
  return target;
}

size_t S_ROOM_CHAT_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ROOM_CHAT_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Protocol.ChatMessage chat = 2;
  if (this->_internal_has_chat()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chat_);
  }

  // int64 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ROOM_CHAT_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ROOM_CHAT_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ROOM_CHAT_NTF::GetClassData() const { return &_class_data_; }


void S_ROOM_CHAT_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ROOM_CHAT_NTF*>(&to_msg);
  auto& from = static_cast<const S_ROOM_CHAT_NTF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ROOM_CHAT_NTF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chat()) {
    _this->_internal_mutable_chat()->::Protocol::ChatMessage::MergeFrom(
        from._internal_chat());
  }
  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ROOM_CHAT_NTF::CopyFrom(const S_ROOM_CHAT_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ROOM_CHAT_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ROOM_CHAT_NTF::IsInitialized() const {
  return true;
}

void S_ROOM_CHAT_NTF::InternalSwap(S_ROOM_CHAT_NTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ROOM_CHAT_NTF, _impl_.roomid_)
      + sizeof(S_ROOM_CHAT_NTF::_impl_.roomid_)
      - PROTOBUF_FIELD_OFFSET(S_ROOM_CHAT_NTF, _impl_.chat_)>(
          reinterpret_cast<char*>(&_impl_.chat_),
          reinterpret_cast<char*>(&other->_impl_.chat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ROOM_CHAT_NTF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class C_LEAVE_ROOM_REQ::_Internal {
 public:
};

C_LEAVE_ROOM_REQ::C_LEAVE_ROOM_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_ROOM_REQ)
}
C_LEAVE_ROOM_REQ::C_LEAVE_ROOM_REQ(const C_LEAVE_ROOM_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LEAVE_ROOM_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.roomid_ = from._impl_.roomid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_ROOM_REQ)
}

inline void C_LEAVE_ROOM_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

C_LEAVE_ROOM_REQ::~C_LEAVE_ROOM_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_LEAVE_ROOM_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LEAVE_ROOM_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C_LEAVE_ROOM_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LEAVE_ROOM_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LEAVE_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roomid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LEAVE_ROOM_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LEAVE_ROOM_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LEAVE_ROOM_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LEAVE_ROOM_REQ)
  return target;
}

size_t C_LEAVE_ROOM_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LEAVE_ROOM_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_ROOM_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LEAVE_ROOM_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_ROOM_REQ::GetClassData() const { return &_class_data_; }


void C_LEAVE_ROOM_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LEAVE_ROOM_REQ*>(&to_msg);
  auto& from = static_cast<const C_LEAVE_ROOM_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LEAVE_ROOM_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LEAVE_ROOM_REQ::CopyFrom(const C_LEAVE_ROOM_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LEAVE_ROOM_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LEAVE_ROOM_REQ::IsInitialized() const {
  return true;
}

void C_LEAVE_ROOM_REQ::InternalSwap(C_LEAVE_ROOM_REQ* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.roomid_, other->_impl_.roomid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_ROOM_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_LEAVE_ROOM_ACK::_Internal {
 public:
};

S_LEAVE_ROOM_ACK::S_LEAVE_ROOM_ACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_ROOM_ACK)
}
S_LEAVE_ROOM_ACK::S_LEAVE_ROOM_ACK(const S_LEAVE_ROOM_ACK& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LEAVE_ROOM_ACK* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roomid_, &from._impl_.roomid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.success_) -
    reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.success_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_ROOM_ACK)
}

inline void S_LEAVE_ROOM_ACK::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roomid_){0}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_LEAVE_ROOM_ACK::~S_LEAVE_ROOM_ACK() {
  // @@protoc_insertion_point(destructor:Protocol.S_LEAVE_ROOM_ACK)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LEAVE_ROOM_ACK::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_LEAVE_ROOM_ACK::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LEAVE_ROOM_ACK::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LEAVE_ROOM_ACK)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roomid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.success_) -
      reinterpret_cast<char*>(&_impl_.roomid_)) + sizeof(_impl_.success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEAVE_ROOM_ACK::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 roomId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.roomid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LEAVE_ROOM_ACK::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LEAVE_ROOM_ACK)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_roomid(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LEAVE_ROOM_ACK)
  return target;
}

size_t S_LEAVE_ROOM_ACK::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LEAVE_ROOM_ACK)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 roomId = 1;
  if (this->_internal_roomid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roomid());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_ROOM_ACK::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LEAVE_ROOM_ACK::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_ROOM_ACK::GetClassData() const { return &_class_data_; }


void S_LEAVE_ROOM_ACK::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LEAVE_ROOM_ACK*>(&to_msg);
  auto& from = static_cast<const S_LEAVE_ROOM_ACK&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LEAVE_ROOM_ACK)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_roomid() != 0) {
    _this->_internal_set_roomid(from._internal_roomid());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LEAVE_ROOM_ACK::CopyFrom(const S_LEAVE_ROOM_ACK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LEAVE_ROOM_ACK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEAVE_ROOM_ACK::IsInitialized() const {
  return true;
}

void S_LEAVE_ROOM_ACK::InternalSwap(S_LEAVE_ROOM_ACK* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LEAVE_ROOM_ACK, _impl_.success_)
      + sizeof(S_LEAVE_ROOM_ACK::_impl_.success_)
      - PROTOBUF_FIELD_OFFSET(S_LEAVE_ROOM_ACK, _impl_.roomid_)>(
          reinterpret_cast<char*>(&_impl_.roomid_),
          reinterpret_cast<char*>(&other->_impl_.roomid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_ROOM_ACK::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_PRESENCE_NTF::_Internal {
 public:
};

S_PRESENCE_NTF::S_PRESENCE_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PRESENCE_NTF)
}
S_PRESENCE_NTF::S_PRESENCE_NTF(const S_PRESENCE_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PRESENCE_NTF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PRESENCE_NTF)
}

inline void S_PRESENCE_NTF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.playerid_){int64_t{0}}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_PRESENCE_NTF::~S_PRESENCE_NTF() {
  // @@protoc_insertion_point(destructor:Protocol.S_PRESENCE_NTF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PRESENCE_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_PRESENCE_NTF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PRESENCE_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PRESENCE_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PRESENCE_NTF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PresenceStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::Protocol::PresenceStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PRESENCE_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PRESENCE_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // .Protocol.PresenceStatus status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PRESENCE_NTF)
  return target;
}

size_t S_PRESENCE_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PRESENCE_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // .Protocol.PresenceStatus status = 2;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PRESENCE_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PRESENCE_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PRESENCE_NTF::GetClassData() const { return &_class_data_; }


void S_PRESENCE_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PRESENCE_NTF*>(&to_msg);
  auto& from = static_cast<const S_PRESENCE_NTF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PRESENCE_NTF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PRESENCE_NTF::CopyFrom(const S_PRESENCE_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PRESENCE_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PRESENCE_NTF::IsInitialized() const {
  return true;
}

void S_PRESENCE_NTF::InternalSwap(S_PRESENCE_NTF* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_PRESENCE_NTF, _impl_.status_)
      + sizeof(S_PRESENCE_NTF::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(S_PRESENCE_NTF, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PRESENCE_NTF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class S_RATE_LIMIT_NTF::_Internal {
 public:
};

S_RATE_LIMIT_NTF::S_RATE_LIMIT_NTF(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_RATE_LIMIT_NTF)
}
S_RATE_LIMIT_NTF::S_RATE_LIMIT_NTF(const S_RATE_LIMIT_NTF& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_RATE_LIMIT_NTF* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.playerid_){}
    , decltype(_impl_.cooldownsec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.playerid_, &from._impl_.playerid_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cooldownsec_) -
    reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.cooldownsec_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_RATE_LIMIT_NTF)
}

inline void S_RATE_LIMIT_NTF::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.playerid_){int64_t{0}}
    , decltype(_impl_.cooldownsec_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_RATE_LIMIT_NTF::~S_RATE_LIMIT_NTF() {
  // @@protoc_insertion_point(destructor:Protocol.S_RATE_LIMIT_NTF)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_RATE_LIMIT_NTF::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
}

void S_RATE_LIMIT_NTF::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_RATE_LIMIT_NTF::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_RATE_LIMIT_NTF)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.playerid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.cooldownsec_) -
      reinterpret_cast<char*>(&_impl_.playerid_)) + sizeof(_impl_.cooldownsec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_RATE_LIMIT_NTF::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cooldownSec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.cooldownsec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_RATE_LIMIT_NTF.reason"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_RATE_LIMIT_NTF::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_RATE_LIMIT_NTF)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_playerid(), target);
  }

  // int32 cooldownSec = 2;
  if (this->_internal_cooldownsec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_cooldownsec(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_RATE_LIMIT_NTF.reason");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_RATE_LIMIT_NTF)
  return target;
}

size_t S_RATE_LIMIT_NTF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_RATE_LIMIT_NTF)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // int64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_playerid());
  }

  // int32 cooldownSec = 2;
  if (this->_internal_cooldownsec() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cooldownsec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_RATE_LIMIT_NTF::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_RATE_LIMIT_NTF::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_RATE_LIMIT_NTF::GetClassData() const { return &_class_data_; }


void S_RATE_LIMIT_NTF::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_RATE_LIMIT_NTF*>(&to_msg);
  auto& from = static_cast<const S_RATE_LIMIT_NTF&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_RATE_LIMIT_NTF)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  if (from._internal_cooldownsec() != 0) {
    _this->_internal_set_cooldownsec(from._internal_cooldownsec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_RATE_LIMIT_NTF::CopyFrom(const S_RATE_LIMIT_NTF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_RATE_LIMIT_NTF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_RATE_LIMIT_NTF::IsInitialized() const {
  return true;
}

void S_RATE_LIMIT_NTF::InternalSwap(S_RATE_LIMIT_NTF* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_RATE_LIMIT_NTF, _impl_.cooldownsec_)
      + sizeof(S_RATE_LIMIT_NTF::_impl_.cooldownsec_)
      - PROTOBUF_FIELD_OFFSET(S_RATE_LIMIT_NTF, _impl_.playerid_)>(
          reinterpret_cast<char*>(&_impl_.playerid_),
          reinterpret_cast<char*>(&other->_impl_.playerid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_RATE_LIMIT_NTF::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class C_ADMIN_COMMAND_REQ::_Internal {
 public:
};

C_ADMIN_COMMAND_REQ::C_ADMIN_COMMAND_REQ(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ADMIN_COMMAND_REQ)
}
C_ADMIN_COMMAND_REQ::C_ADMIN_COMMAND_REQ(const C_ADMIN_COMMAND_REQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ADMIN_COMMAND_REQ* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_command().empty()) {
    _this->_impl_.command_.Set(from._internal_command(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ADMIN_COMMAND_REQ)
}

inline void C_ADMIN_COMMAND_REQ::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.command_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ADMIN_COMMAND_REQ::~C_ADMIN_COMMAND_REQ() {
  // @@protoc_insertion_point(destructor:Protocol.C_ADMIN_COMMAND_REQ)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ADMIN_COMMAND_REQ::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.command_.Destroy();
}

void C_ADMIN_COMMAND_REQ::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ADMIN_COMMAND_REQ::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ADMIN_COMMAND_REQ)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.command_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ADMIN_COMMAND_REQ::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ADMIN_COMMAND_REQ.command"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ADMIN_COMMAND_REQ::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ADMIN_COMMAND_REQ)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ADMIN_COMMAND_REQ.command");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ADMIN_COMMAND_REQ)
  return target;
}

size_t C_ADMIN_COMMAND_REQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ADMIN_COMMAND_REQ)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string command = 1;
  if (!this->_internal_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ADMIN_COMMAND_REQ::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ADMIN_COMMAND_REQ::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ADMIN_COMMAND_REQ::GetClassData() const { return &_class_data_; }


void C_ADMIN_COMMAND_REQ::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ADMIN_COMMAND_REQ*>(&to_msg);
  auto& from = static_cast<const C_ADMIN_COMMAND_REQ&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ADMIN_COMMAND_REQ)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_command().empty()) {
    _this->_internal_set_command(from._internal_command());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ADMIN_COMMAND_REQ::CopyFrom(const C_ADMIN_COMMAND_REQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ADMIN_COMMAND_REQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ADMIN_COMMAND_REQ::IsInitialized() const {
  return true;
}

void C_ADMIN_COMMAND_REQ::InternalSwap(C_ADMIN_COMMAND_REQ* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.command_, lhs_arena,
      &other->_impl_.command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ADMIN_COMMAND_REQ::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class S_ADMIN_COMMAND_RES::_Internal {
 public:
};

S_ADMIN_COMMAND_RES::S_ADMIN_COMMAND_RES(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ADMIN_COMMAND_RES)
}
S_ADMIN_COMMAND_RES::S_ADMIN_COMMAND_RES(const S_ADMIN_COMMAND_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ADMIN_COMMAND_RES* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ADMIN_COMMAND_RES)
}

inline void S_ADMIN_COMMAND_RES::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_){}
    , decltype(_impl_.result_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_ADMIN_COMMAND_RES::~S_ADMIN_COMMAND_RES() {
  // @@protoc_insertion_point(destructor:Protocol.S_ADMIN_COMMAND_RES)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ADMIN_COMMAND_RES::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_.Destroy();
}

void S_ADMIN_COMMAND_RES::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ADMIN_COMMAND_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ADMIN_COMMAND_RES)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_.ClearToEmpty();
  _impl_.result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ADMIN_COMMAND_RES::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Protocol.AdminActionResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::Protocol::AdminActionResult>(val));
        } else
          goto handle_unusual;
        continue;
      // string output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ADMIN_COMMAND_RES.output"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ADMIN_COMMAND_RES::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ADMIN_COMMAND_RES)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Protocol.AdminActionResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // string output = 2;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ADMIN_COMMAND_RES.output");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_output(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ADMIN_COMMAND_RES)
  return target;
}

size_t S_ADMIN_COMMAND_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ADMIN_COMMAND_RES)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output = 2;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  // .Protocol.AdminActionResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ADMIN_COMMAND_RES::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ADMIN_COMMAND_RES::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ADMIN_COMMAND_RES::GetClassData() const { return &_class_data_; }


void S_ADMIN_COMMAND_RES::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ADMIN_COMMAND_RES*>(&to_msg);
  auto& from = static_cast<const S_ADMIN_COMMAND_RES&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ADMIN_COMMAND_RES)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ADMIN_COMMAND_RES::CopyFrom(const S_ADMIN_COMMAND_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ADMIN_COMMAND_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ADMIN_COMMAND_RES::IsInitialized() const {
  return true;
}

void S_ADMIN_COMMAND_RES::InternalSwap(S_ADMIN_COMMAND_RES* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ADMIN_COMMAND_RES::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN_RES*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATE_ROOM_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_CREATE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CREATE_ROOM_RES*
Arena::CreateMaybeMessage< ::Protocol::S_CREATE_ROOM_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CREATE_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_JOIN_ROOM_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_JOIN_ROOM_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_JOIN_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_JOIN_ROOM_RES*
Arena::CreateMaybeMessage< ::Protocol::S_JOIN_ROOM_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_JOIN_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_JOIN_ROOM_NTF*
Arena::CreateMaybeMessage< ::Protocol::S_JOIN_ROOM_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_JOIN_ROOM_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ROOM_CHAT_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_ROOM_CHAT_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ROOM_CHAT_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ROOM_CHAT_NTF*
Arena::CreateMaybeMessage< ::Protocol::S_ROOM_CHAT_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ROOM_CHAT_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_ROOM_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_ROOM_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_ROOM_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_ROOM_ACK*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_ROOM_ACK >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_ROOM_ACK >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PRESENCE_NTF*
Arena::CreateMaybeMessage< ::Protocol::S_PRESENCE_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PRESENCE_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_RATE_LIMIT_NTF*
Arena::CreateMaybeMessage< ::Protocol::S_RATE_LIMIT_NTF >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_RATE_LIMIT_NTF >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ADMIN_COMMAND_REQ*
Arena::CreateMaybeMessage< ::Protocol::C_ADMIN_COMMAND_REQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ADMIN_COMMAND_REQ >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ADMIN_COMMAND_RES*
Arena::CreateMaybeMessage< ::Protocol::S_ADMIN_COMMAND_RES >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ADMIN_COMMAND_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
