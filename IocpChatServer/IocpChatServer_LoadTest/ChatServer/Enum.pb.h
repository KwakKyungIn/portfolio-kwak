// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Enum.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Enum_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Enum_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Enum_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

enum ConnectStatus : int {
  CONNECT_OK = 0,
  CONNECT_FAIL = 1,
  CONNECT_RECONNECT = 2,
  ConnectStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectStatus_IsValid(int value);
constexpr ConnectStatus ConnectStatus_MIN = CONNECT_OK;
constexpr ConnectStatus ConnectStatus_MAX = CONNECT_RECONNECT;
constexpr int ConnectStatus_ARRAYSIZE = ConnectStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectStatus_descriptor();
template<typename T>
inline const std::string& ConnectStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectStatus_descriptor(), enum_t_value);
}
inline bool ConnectStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectStatus>(
    ConnectStatus_descriptor(), name, value);
}
enum RoomType : int {
  ROOM_PRIVATE = 0,
  ROOM_GROUP = 1,
  ROOM_GUILD = 2,
  RoomType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RoomType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RoomType_IsValid(int value);
constexpr RoomType RoomType_MIN = ROOM_PRIVATE;
constexpr RoomType RoomType_MAX = ROOM_GUILD;
constexpr int RoomType_ARRAYSIZE = RoomType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoomType_descriptor();
template<typename T>
inline const std::string& RoomType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoomType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoomType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoomType_descriptor(), enum_t_value);
}
inline bool RoomType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RoomType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoomType>(
    RoomType_descriptor(), name, value);
}
enum PresenceStatus : int {
  OFFLINE = 0,
  ONLINE = 1,
  IN_GAME = 2,
  AWAY = 3,
  PresenceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PresenceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PresenceStatus_IsValid(int value);
constexpr PresenceStatus PresenceStatus_MIN = OFFLINE;
constexpr PresenceStatus PresenceStatus_MAX = AWAY;
constexpr int PresenceStatus_ARRAYSIZE = PresenceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PresenceStatus_descriptor();
template<typename T>
inline const std::string& PresenceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PresenceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PresenceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PresenceStatus_descriptor(), enum_t_value);
}
inline bool PresenceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PresenceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PresenceStatus>(
    PresenceStatus_descriptor(), name, value);
}
enum FriendStatus : int {
  PENDING = 0,
  ACCEPTED = 1,
  BLOCKED = 2,
  FriendStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FriendStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FriendStatus_IsValid(int value);
constexpr FriendStatus FriendStatus_MIN = PENDING;
constexpr FriendStatus FriendStatus_MAX = BLOCKED;
constexpr int FriendStatus_ARRAYSIZE = FriendStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FriendStatus_descriptor();
template<typename T>
inline const std::string& FriendStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FriendStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FriendStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FriendStatus_descriptor(), enum_t_value);
}
inline bool FriendStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FriendStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FriendStatus>(
    FriendStatus_descriptor(), name, value);
}
enum AdminActionResult : int {
  ACTION_OK = 0,
  ACTION_FAIL = 1,
  AdminActionResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  AdminActionResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool AdminActionResult_IsValid(int value);
constexpr AdminActionResult AdminActionResult_MIN = ACTION_OK;
constexpr AdminActionResult AdminActionResult_MAX = ACTION_FAIL;
constexpr int AdminActionResult_ARRAYSIZE = AdminActionResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AdminActionResult_descriptor();
template<typename T>
inline const std::string& AdminActionResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AdminActionResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AdminActionResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AdminActionResult_descriptor(), enum_t_value);
}
inline bool AdminActionResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AdminActionResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AdminActionResult>(
    AdminActionResult_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Protocol::ConnectStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::ConnectStatus>() {
  return ::Protocol::ConnectStatus_descriptor();
}
template <> struct is_proto_enum< ::Protocol::RoomType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::RoomType>() {
  return ::Protocol::RoomType_descriptor();
}
template <> struct is_proto_enum< ::Protocol::PresenceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::PresenceStatus>() {
  return ::Protocol::PresenceStatus_descriptor();
}
template <> struct is_proto_enum< ::Protocol::FriendStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::FriendStatus>() {
  return ::Protocol::FriendStatus_descriptor();
}
template <> struct is_proto_enum< ::Protocol::AdminActionResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Protocol::AdminActionResult>() {
  return ::Protocol::AdminActionResult_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Enum_2eproto
